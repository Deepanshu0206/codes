#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll INF=1e16;

int main()
{
    ll n;
    cin>>n;
    if(n==1){
        cout<<"0\n";
        return 0;
    }
    vector<ll> c(n);
    for(int i=0;i<n;i++){
        cin>>c[i];
    }
    vector<string> s(n);
    for(int i=0;i<n;i++){
        cin>>s[i];
    }
    ll dp[n][2];
    dp[0][0]=0;
    reverse(s[0].begin(),s[0].end());
    if(s[0]<=s[1]){
        dp[0][1]=c[0];
    }
    else{
        dp[0][1]=INF;
    }
    reverse(s[0].begin(),s[0].end());
    for(int i=1;i<n;i++){
        dp[i][0]=INF;
        if(s[i-1]<=s[i]){
            dp[i][0]=min(dp[i-1][0],dp[i][0]);
        }
        
        reverse(s[i-1].begin(),s[i-1].end());
        if(s[i-1]<=s[i]){
            dp[i][0]=min(dp[i-1][1],dp[i][0]);
        }
        reverse(s[i-1].begin(),s[i-1].end());
        
        dp[i][1]=INF;
        reverse(s[i].begin(),s[i].end());
        if(s[i-1]<=s[i]){
            dp[i][1]=min(dp[i][1],dp[i-1][0]+c[i]);
        }
        reverse(s[i-1].begin(),s[i-1].end());
        if(s[i-1]<=s[i]){
            dp[i][1]=min(dp[i][1],dp[i-1][1]+c[i]);
        }
        reverse(s[i-1].begin(),s[i-1].end());
        reverse(s[i].begin(),s[i].end());
    }
    ll ans=min(dp[n-1][0],dp[n-1][1]);
    if(ans==INF){
        cout<<-1<<endl;
    }
    else{
        cout<<ans<<endl;
    }
    return 0;
}
